# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SimpleWebPageReader(pydantic.BaseModel):
    """
    Simple web page reader.

    Reads pages from the web.

    Args:
    html_to_text (bool): Whether to convert HTML to text.
    Requires `html2text` package.
    metadata_fn (Optional[Callable[[str], Dict]]): A function that takes in
    a URL and returns a dictionary of metadata.
    Default is None.
    """

    is_remote: typing.Optional[bool]
    html_to_text: bool
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
