# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .message_role import MessageRole

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class InputMessage(pydantic.BaseModel):
    """
    This is distinct from a ChatMessage because this schema is enforced by the AI Chat library used in the frontend
    """

    id: typing.Optional[str] = pydantic.Field(description="ID of the message, if any. Not necessarily a UUID.")
    role: MessageRole
    content: str
    data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Additional data to be stored with the message."
    )
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
