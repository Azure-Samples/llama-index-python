# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CloudConfluenceDataSource(pydantic.BaseModel):
    """
    Base component object to capture class names.
    """

    server_url: str = pydantic.Field(description="The server URL of the Confluence instance.")
    authentication_mechanism: str = pydantic.Field(
        description="Type of Authentication for connecting to Confluence APIs."
    )
    user_name: typing.Optional[str] = pydantic.Field(description="The username to use for authentication.")
    api_token: typing.Optional[str] = pydantic.Field(description="The API token to use for authentication.")
    space_key: typing.Optional[str] = pydantic.Field(description="The space key to read from.")
    page_ids: typing.Optional[str] = pydantic.Field(description="The page IDs of the Confluence to read from.")
    cql: typing.Optional[str] = pydantic.Field(description="The CQL query to use for fetching pages.")
    label: typing.Optional[str] = pydantic.Field(description="The label to use for fetching pages.")
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
