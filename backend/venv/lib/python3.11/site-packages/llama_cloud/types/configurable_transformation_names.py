# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ConfigurableTransformationNames(str, enum.Enum):
    """
    An enumeration.
    """

    CHARACTER_SPLITTER = "CHARACTER_SPLITTER"
    PAGE_SPLITTER_NODE_PARSER = "PAGE_SPLITTER_NODE_PARSER"
    CODE_NODE_PARSER = "CODE_NODE_PARSER"
    SENTENCE_AWARE_NODE_PARSER = "SENTENCE_AWARE_NODE_PARSER"
    TOKEN_AWARE_NODE_PARSER = "TOKEN_AWARE_NODE_PARSER"
    MARKDOWN_NODE_PARSER = "MARKDOWN_NODE_PARSER"
    MARKDOWN_ELEMENT_NODE_PARSER = "MARKDOWN_ELEMENT_NODE_PARSER"
    OPENAI_EMBEDDING = "OPENAI_EMBEDDING"
    AZURE_EMBEDDING = "AZURE_EMBEDDING"
    COHERE_EMBEDDING = "COHERE_EMBEDDING"
    BEDROCK_EMBEDDING = "BEDROCK_EMBEDDING"
    HUGGINGFACE_API_EMBEDDING = "HUGGINGFACE_API_EMBEDDING"
    GEMINI_EMBEDDING = "GEMINI_EMBEDDING"

    def visit(
        self,
        character_splitter: typing.Callable[[], T_Result],
        page_splitter_node_parser: typing.Callable[[], T_Result],
        code_node_parser: typing.Callable[[], T_Result],
        sentence_aware_node_parser: typing.Callable[[], T_Result],
        token_aware_node_parser: typing.Callable[[], T_Result],
        markdown_node_parser: typing.Callable[[], T_Result],
        markdown_element_node_parser: typing.Callable[[], T_Result],
        openai_embedding: typing.Callable[[], T_Result],
        azure_embedding: typing.Callable[[], T_Result],
        cohere_embedding: typing.Callable[[], T_Result],
        bedrock_embedding: typing.Callable[[], T_Result],
        huggingface_api_embedding: typing.Callable[[], T_Result],
        gemini_embedding: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ConfigurableTransformationNames.CHARACTER_SPLITTER:
            return character_splitter()
        if self is ConfigurableTransformationNames.PAGE_SPLITTER_NODE_PARSER:
            return page_splitter_node_parser()
        if self is ConfigurableTransformationNames.CODE_NODE_PARSER:
            return code_node_parser()
        if self is ConfigurableTransformationNames.SENTENCE_AWARE_NODE_PARSER:
            return sentence_aware_node_parser()
        if self is ConfigurableTransformationNames.TOKEN_AWARE_NODE_PARSER:
            return token_aware_node_parser()
        if self is ConfigurableTransformationNames.MARKDOWN_NODE_PARSER:
            return markdown_node_parser()
        if self is ConfigurableTransformationNames.MARKDOWN_ELEMENT_NODE_PARSER:
            return markdown_element_node_parser()
        if self is ConfigurableTransformationNames.OPENAI_EMBEDDING:
            return openai_embedding()
        if self is ConfigurableTransformationNames.AZURE_EMBEDDING:
            return azure_embedding()
        if self is ConfigurableTransformationNames.COHERE_EMBEDDING:
            return cohere_embedding()
        if self is ConfigurableTransformationNames.BEDROCK_EMBEDDING:
            return bedrock_embedding()
        if self is ConfigurableTransformationNames.HUGGINGFACE_API_EMBEDDING:
            return huggingface_api_embedding()
        if self is ConfigurableTransformationNames.GEMINI_EMBEDDING:
            return gemini_embedding()
