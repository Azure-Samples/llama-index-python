# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .pipeline_file_custom_metadata_value import PipelineFileCustomMetadataValue
from .pipeline_file_resource_info_value import PipelineFileResourceInfoValue

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PipelineFile(pydantic.BaseModel):
    """
    Schema for a file that is associated with a pipeline.
    """

    id: str = pydantic.Field(description="Unique identifier")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(description="Creation datetime")
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(description="Update datetime")
    name: typing.Optional[str]
    file_size: typing.Optional[int] = pydantic.Field(description="Size of the file in bytes")
    file_type: typing.Optional[str] = pydantic.Field(description="File type (e.g. pdf, docx, etc.)")
    project_id: str = pydantic.Field(description="The ID of the project that the file belongs to")
    last_modified_at: typing.Optional[dt.datetime] = pydantic.Field(description="The last modified time of the file")
    resource_info: typing.Optional[typing.Dict[str, PipelineFileResourceInfoValue]] = pydantic.Field(
        description="Resource information for the file"
    )
    data_source_id: typing.Optional[str] = pydantic.Field(
        description="The ID of the data source that the file belongs to"
    )
    file_id: typing.Optional[str] = pydantic.Field(description="The ID of the file")
    pipeline_id: str = pydantic.Field(description="The ID of the pipeline that the file is associated with")
    custom_metadata: typing.Optional[typing.Dict[str, PipelineFileCustomMetadataValue]] = pydantic.Field(
        description="Custom metadata for the file"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
