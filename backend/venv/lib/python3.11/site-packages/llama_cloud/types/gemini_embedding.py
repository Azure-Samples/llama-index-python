# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class GeminiEmbedding(pydantic.BaseModel):
    """
    Google Gemini embeddings.

    Args:
    model_name (str): Model for embedding.
    Defaults to "models/embedding-001".

        api_key (Optional[str]): API key to access the model. Defaults to None.
        api_base (Optional[str]): API base to access the model. Defaults to Official Base.
        transport (Optional[str]): Transport to access the model.
    """

    model_name: typing.Optional[str] = pydantic.Field(description="The name of the embedding model.")
    embed_batch_size: typing.Optional[int] = pydantic.Field(description="The batch size for embedding calls.")
    callback_manager: typing.Optional[typing.Dict[str, typing.Any]]
    num_workers: typing.Optional[int] = pydantic.Field(
        description="The number of workers to use for async embedding calls."
    )
    title: typing.Optional[str] = pydantic.Field(
        description="Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid."
    )
    task_type: typing.Optional[str] = pydantic.Field(description="The task for embedding model.")
    api_key: typing.Optional[str] = pydantic.Field(description="API key to access the model. Defaults to None.")
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
