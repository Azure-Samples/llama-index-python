# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .parser_languages import ParserLanguages

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class LlamaParseParameters(pydantic.BaseModel):
    """
    Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
    """

    languages: typing.Optional[typing.List[ParserLanguages]]
    parsing_instruction: typing.Optional[str]
    disable_ocr: typing.Optional[bool]
    invalidate_cache: typing.Optional[bool]
    do_not_cache: typing.Optional[bool]
    fast_mode: typing.Optional[bool]
    skip_diagonal_text: typing.Optional[bool]
    gpt_4_o_mode: typing.Optional[bool] = pydantic.Field(alias="gpt4o_mode")
    gpt_4_o_api_key: typing.Optional[str] = pydantic.Field(alias="gpt4o_api_key")
    do_not_unroll_columns: typing.Optional[bool]
    page_separator: typing.Optional[str]
    bounding_box: typing.Optional[str]
    target_pages: typing.Optional[str]
    use_vendor_multimodal_model: typing.Optional[str]
    vendor_multimodal_model_name: typing.Optional[str]
    vendor_multimodal_api_key: typing.Optional[str]
    page_prefix: typing.Optional[str]
    page_suffix: typing.Optional[str]
    take_screenshot: typing.Optional[bool]
    s_3_input_path: typing.Optional[str] = pydantic.Field(alias="s3_input_path")
    s_3_output_path_prefix: typing.Optional[str] = pydantic.Field(alias="s3_output_path_prefix")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
