name: Deploy to Azure
on:
    workflow_dispatch:
    push:
      # Run when commits are pushed to mainline branch (main or master)
      # Set this to the mainline branch you are using
      branches:
        - main

    # GitHub Actions workflow to deploy to Azure using azd
    # To configure required secrets for connecting to Azure, simply run `azd pipeline config`
  
    # Set up permissions for deploying with secretless Azure federated credentials
    # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
    id-token: write
    contents: read

jobs:
    build:
        runs-on: ubuntu-latest
        env:
            AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
            AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
            AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
            AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
            AZURE_CONTAINER_REGISTRY_ENDPOINT: ${{ vars.AZURE_CONTAINER_REGISTRY_ENDPOINT }}
            AZURE_DEPLOYMENT_NAME:  ${{ vars.AZURE_DEPLOYMENT_NAME }}
            AZURE_KEY_VAULT_ENDPOINT: ${{ vars.AZURE_KEY_VAULT_ENDPOINT }}
            AZURE_KEY_VAULT_NAME: ${{ vars.AZURE_KEY_VAULT_NAME}}
            AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
            EMBEDDING_DIM: ${{ vars.EMBEDDING_DIM }}
            EMBEDDING_MODEL: ${{ vars.EMBEDDING_MODEL }}
            FILESERVER_URL_PREFIX: ${{ vars.FILESERVER_URL_PREFIX }}
            LLM_MAX_TOKENS: ${{ vars.LLM_MAX_TOKENS }}
            LLM_TEMPERATURE: ${{ vars.LLM_TEMPERATURE }}
            MODEL: ${{ vars.MODEL }}
            MODEL_PROVIDER: ${{ vars.MODEL_PROVIDER }}
            OPENAI_API_KEY: ""
            OPENAI_API_VERSION: ${{ vars.OPENAI_API_VERSION }}
            SERVICE_LLAMA_INDEX_PYTHON_IMAGE_NAME: ${{ vars.SERVICE_LLAMA_INDEX_PYTHON_IMAGE_NAME }}
            SERVICE_LLAMA_INDEX_PYTHON_RESOURCE_EXISTS: ${{ vars.SERVICE_LLAMA_INDEX_PYTHON_RESOURCE_EXISTS }}
            SYSTEM_PROMPT: ${{ vars.SYSTEM_PROMPT }}
            TOP_K: ${{ vars.TOP_K }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js v20
              uses: actions/setup-node@v4
              with:
                node-version: 20
            
            - name: Install azd
              uses: Azure/setup-azd@v1.0.0

            - name: Log in with Azure (Client Credentials)
              if: ${{ env.AZURE_CREDENTIALS != '' }}
              run: |
                $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
                Write-Host "::add-mask::$($info.clientSecret)"

                azd auth login `
                --client-id "$($info.clientId)" `
                --client-secret "$($info.clientSecret)" `
                --tenant-id "$($info.tenantId)"
              shell: pwsh
              env:
                AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Provision Infrastructure
              run: azd provision --no-prompt
              env:
                AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
                AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
                AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

            - name: Deploy Application
              run: azd deploy --no-prompt
              env:
                AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
                AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
                AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}