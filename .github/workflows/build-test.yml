name: Build and test

on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

jobs:
    build_test:
        name: Test ${{ matrix.os }} Python ${{ matrix.python_version }}
        runs-on: ${{ matrix.os }}
        strategy:
          fail-fast: false
          matrix:
            os: ["ubuntu-20.04", "windows-latest", macos-latest]
            python_version: ["3.11"]
        steps:
          - uses: actions/checkout@v4
          - name: Setup python
            uses: actions/setup-python@v5
            with:
                python-version: ${{ matrix.python_version }}
                architecture: x64
          - name: Setup node
            uses: actions/setup-node@v4
            with:
                node-version: 20
          - run: git config --global core.autocrlf false
          - uses: actions/checkout@v4 # checkout the repository content
          - name: Setup Node.js v${{ matrix.node-version }}
            uses: actions/setup-node@v4
            with:
              node-version: ${{ matrix.node-version }}

          - name: setup python
            uses: actions/setup-python@v5
            with:
               python-version: '3.11' # install the python version needed

          - name: Install frontend dependencies
            run: |
                cd ./frontend
                npm install
          - name: Build packages
            run: |
                cd ./frontend
                npm run build
          - name: Test packages
            run: |
                cd ./frontend
                npm test --if-present || exit 0

          - name: install python dependencies
            run: |
             python3 -m venv venv
             source venv/bin/activate
             pip3 install -r requirements-dev.txt
          - name: Lint with ruff
            run: |
             cd ./backend 
             ruff check .
          - name: Check formatting with black
            run: |
             cd ./backend 
             black . --check --verbose

    build_test_all:
        if: always()
        runs-on: ubuntu-latest
        needs: build_test
        steps:
            - name: Check build matrix status
              if: ${{ needs.build_test.result != 'success' }}
              run: exit 1        
